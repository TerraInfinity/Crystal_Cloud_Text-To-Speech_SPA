"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./context/TTSContext.js":
/*!*******************************!*\
  !*** ./context/TTSContext.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TTSProvider: () => (/* binding */ TTSProvider),\n/* harmony export */   useTTS: () => (/* binding */ useTTS)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n// Initial state for the TTS application\nconst initialState = {\n    // Text input state\n    inputText: '',\n    // Template and sections\n    currentTemplate: 'general',\n    sections: [],\n    // Speech engine settings\n    speechEngine: 'webSpeech',\n    selectedVoice: null,\n    availableVoices: [],\n    // API keys\n    elevenLabsApiKey: '',\n    awsPollyAccessKey: '',\n    awsPollySecretKey: '',\n    anthropicApiKey: '',\n    openaiApiKey: '',\n    // UI state\n    activeTab: 'main',\n    isProcessing: false,\n    errorMessage: null,\n    notification: null,\n    // Audio state\n    generatedAudios: {},\n    mergedAudio: null,\n    isPlaying: false,\n    // Mode\n    mode: 'demo'\n};\n// Reducer to handle all state changes\nfunction ttsReducer(state, action) {\n    switch(action.type){\n        case 'SET_INPUT_TEXT':\n            return {\n                ...state,\n                inputText: action.payload\n            };\n        case 'SET_TEMPLATE':\n            return {\n                ...state,\n                currentTemplate: action.payload\n            };\n        case 'SET_SECTIONS':\n            return {\n                ...state,\n                sections: action.payload\n            };\n        case 'ADD_SECTION':\n            return {\n                ...state,\n                sections: [\n                    ...state.sections,\n                    action.payload\n                ]\n            };\n        case 'UPDATE_SECTION':\n            return {\n                ...state,\n                sections: state.sections.map((section)=>section.id === action.payload.id ? action.payload : section)\n            };\n        case 'REMOVE_SECTION':\n            return {\n                ...state,\n                sections: state.sections.filter((section)=>section.id !== action.payload)\n            };\n        case 'REORDER_SECTIONS':\n            return {\n                ...state,\n                sections: action.payload\n            };\n        case 'SET_SPEECH_ENGINE':\n            return {\n                ...state,\n                speechEngine: action.payload\n            };\n        case 'SET_SELECTED_VOICE':\n            return {\n                ...state,\n                selectedVoice: action.payload\n            };\n        case 'SET_AVAILABLE_VOICES':\n            return {\n                ...state,\n                availableVoices: action.payload\n            };\n        case 'SET_API_KEY':\n            return {\n                ...state,\n                [action.payload.key]: action.payload.value\n            };\n        case 'SET_ACTIVE_TAB':\n            return {\n                ...state,\n                activeTab: action.payload\n            };\n        case 'SET_PROCESSING':\n            return {\n                ...state,\n                isProcessing: action.payload\n            };\n        case 'SET_ERROR':\n            return {\n                ...state,\n                errorMessage: action.payload\n            };\n        case 'SET_NOTIFICATION':\n            return {\n                ...state,\n                notification: action.payload\n            };\n        case 'SET_GENERATED_AUDIO':\n            return {\n                ...state,\n                generatedAudios: {\n                    ...state.generatedAudios,\n                    [action.payload.sectionId]: action.payload.audioUrl\n                }\n            };\n        case 'SET_MERGED_AUDIO':\n            return {\n                ...state,\n                mergedAudio: action.payload\n            };\n        case 'SET_PLAYING':\n            return {\n                ...state,\n                isPlaying: action.payload\n            };\n        case 'SET_MODE':\n            return {\n                ...state,\n                mode: action.payload\n            };\n        case 'LOAD_DEMO_CONTENT':\n            return {\n                ...state,\n                ...action.payload\n            };\n        case 'RESET_STATE':\n            return {\n                ...initialState\n            };\n        default:\n            return state;\n    }\n}\n// Create context\nconst TTSContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n// Provider component\nconst TTSProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(ttsReducer, initialState);\n    // Initialize available voices when the component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TTSProvider.useEffect\": ()=>{\n            const initVoices = {\n                \"TTSProvider.useEffect.initVoices\": ()=>{\n                    if ( true && window.speechSynthesis) {\n                        // Get Web Speech API voices\n                        const synth = window.speechSynthesis;\n                        // Wait for voices to be loaded\n                        const getVoices = {\n                            \"TTSProvider.useEffect.initVoices.getVoices\": ()=>{\n                                const voices = synth.getVoices();\n                                if (voices.length > 0) {\n                                    // Get voices only if we don't already have them\n                                    if (state.availableVoices.length === 0) {\n                                        dispatch({\n                                            type: 'SET_AVAILABLE_VOICES',\n                                            payload: voices\n                                        });\n                                        // Only set a default voice if none is selected\n                                        if (!state.selectedVoice) {\n                                            // Find a good default voice (prefer English)\n                                            const defaultVoice = voices.find({\n                                                \"TTSProvider.useEffect.initVoices.getVoices\": (v)=>v.lang === 'en-US'\n                                            }[\"TTSProvider.useEffect.initVoices.getVoices\"]) || voices[0];\n                                            dispatch({\n                                                type: 'SET_SELECTED_VOICE',\n                                                payload: defaultVoice\n                                            });\n                                        }\n                                    }\n                                } else {\n                                    setTimeout(getVoices, 100);\n                                }\n                            }\n                        }[\"TTSProvider.useEffect.initVoices.getVoices\"];\n                        // Check if voices are already loaded\n                        if (synth.getVoices().length > 0) {\n                            getVoices();\n                        } else {\n                            // Otherwise wait for voiceschanged event\n                            synth.addEventListener('voiceschanged', getVoices, {\n                                once: true\n                            });\n                        }\n                    }\n                }\n            }[\"TTSProvider.useEffect.initVoices\"];\n            // Only initialize once\n            initVoices();\n        }\n    }[\"TTSProvider.useEffect\"], [\n        state.availableVoices.length,\n        state.selectedVoice\n    ]);\n    // Load demo content\n    const loadDemoContent = async ()=>{\n        try {\n            dispatch({\n                type: 'SET_PROCESSING',\n                payload: true\n            });\n            // Fetch demo content\n            const response = await fetch('/demo_kundalini_kriya.json');\n            if (!response.ok) throw new Error('Failed to load demo content');\n            const demoData = await response.json();\n            // Update state with demo data\n            dispatch({\n                type: 'LOAD_DEMO_CONTENT',\n                payload: {\n                    currentTemplate: 'yogaKriya',\n                    sections: demoData.sections,\n                    mode: 'demo'\n                }\n            });\n            dispatch({\n                type: 'SET_NOTIFICATION',\n                payload: {\n                    type: 'success',\n                    message: 'Demo content loaded successfully!'\n                }\n            });\n        } catch (error) {\n            dispatch({\n                type: 'SET_ERROR',\n                payload: \"Error loading demo content: \".concat(error.message)\n            });\n        } finally{\n            dispatch({\n                type: 'SET_PROCESSING',\n                payload: false\n            });\n        }\n    };\n    // Clear notification after 5 seconds\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TTSProvider.useEffect\": ()=>{\n            if (state.notification) {\n                const timer = setTimeout({\n                    \"TTSProvider.useEffect.timer\": ()=>{\n                        dispatch({\n                            type: 'SET_NOTIFICATION',\n                            payload: null\n                        });\n                    }\n                }[\"TTSProvider.useEffect.timer\"], 5000);\n                return ({\n                    \"TTSProvider.useEffect\": ()=>clearTimeout(timer)\n                })[\"TTSProvider.useEffect\"];\n            }\n        }\n    }[\"TTSProvider.useEffect\"], [\n        state.notification\n    ]);\n    // Prepare the value object with state and actions\n    const value = {\n        ...state,\n        dispatch,\n        actions: {\n            setInputText: (text)=>dispatch({\n                    type: 'SET_INPUT_TEXT',\n                    payload: text\n                }),\n            setTemplate: (template)=>dispatch({\n                    type: 'SET_TEMPLATE',\n                    payload: template\n                }),\n            addSection: (section)=>dispatch({\n                    type: 'ADD_SECTION',\n                    payload: section\n                }),\n            updateSection: (section)=>dispatch({\n                    type: 'UPDATE_SECTION',\n                    payload: section\n                }),\n            removeSection: (sectionId)=>dispatch({\n                    type: 'REMOVE_SECTION',\n                    payload: sectionId\n                }),\n            reorderSections: (sections)=>dispatch({\n                    type: 'REORDER_SECTIONS',\n                    payload: sections\n                }),\n            setSpeechEngine: (engine)=>dispatch({\n                    type: 'SET_SPEECH_ENGINE',\n                    payload: engine\n                }),\n            setSelectedVoice: (voice)=>dispatch({\n                    type: 'SET_SELECTED_VOICE',\n                    payload: voice\n                }),\n            setActiveTab: (tab)=>dispatch({\n                    type: 'SET_ACTIVE_TAB',\n                    payload: tab\n                }),\n            setApiKey: (key, value)=>dispatch({\n                    type: 'SET_API_KEY',\n                    payload: {\n                        key,\n                        value\n                    }\n                }),\n            setMode: (mode)=>dispatch({\n                    type: 'SET_MODE',\n                    payload: mode\n                }),\n            loadDemoContent,\n            setNotification: (notification)=>dispatch({\n                    type: 'SET_NOTIFICATION',\n                    payload: notification\n                }),\n            setError: (error)=>dispatch({\n                    type: 'SET_ERROR',\n                    payload: error\n                }),\n            setProcessing: (isProcessing)=>dispatch({\n                    type: 'SET_PROCESSING',\n                    payload: isProcessing\n                }),\n            setGeneratedAudio: (sectionId, audioUrl)=>dispatch({\n                    type: 'SET_GENERATED_AUDIO',\n                    payload: {\n                        sectionId,\n                        audioUrl\n                    }\n                }),\n            setMergedAudio: (audioUrl)=>dispatch({\n                    type: 'SET_MERGED_AUDIO',\n                    payload: audioUrl\n                }),\n            setPlaying: (isPlaying)=>dispatch({\n                    type: 'SET_PLAYING',\n                    payload: isPlaying\n                }),\n            resetState: ()=>dispatch({\n                    type: 'RESET_STATE'\n                })\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TTSContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/runner/workspace/context/TTSContext.js\",\n        lineNumber: 253,\n        columnNumber: 5\n    }, undefined);\n};\n_s(TTSProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = TTSProvider;\n// Custom hook to use the TTS context\nconst useTTS = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(TTSContext);\n    if (context === undefined) {\n        throw new Error('useTTS must be used within a TTSProvider');\n    }\n    return context;\n};\n_s1(useTTS, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TTSProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./context/TTSContext.js\n"));

/***/ })

});